#Exercise 7 - MongoDB
mongoimport -d restaurants restaurants.json
mongo
show dbs
use restaurants
show collections
#1) Display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
db.restaurants.find({},{restaurant_id:1, name:1, borough:1, cuisine:1});
{ "_id" : ObjectId("61e191b000804d363d204553"), "borough" : "Brooklyn", "cuisine" : "Delicatessen", "name" : "Wilken'S Fine Food", "restaurant_id" : "40356483" }
{ "_id" : ObjectId("61e191b000804d363d204554"), "borough" : "Brooklyn", "cuisine" : "American", "name" : "Regina Caterers", "restaurant_id" : "40356649" }
{ "_id" : ObjectId("61e191b000804d363d204555"), "borough" : "Brooklyn", "cuisine" : "Ice Cream, Gelato, Yogurt, Ices", "name" : "Taste The Tropics Ice Cream", "restaurant_id" : "40356731" }
{ "_id" : ObjectId("61e191b000804d363d204556"), "borough" : "Brooklyn", "cuisine" : "American", "name" : "Riviera Caterer", "restaurant_id" : "40356018" }
{ "_id" : ObjectId("61e191b000804d363d204557"), "borough" : "Bronx", "cuisine" : "American", "name" : "Wild Asia", "restaurant_id" : "40357217" }
...
#2) Display the second group of 5 restaurants which are in the borough Bronx.
> db.restaurants.find({borough:"Bronx"},{restaurant_id:1, name:1, borough:1, cuisine:1}).limit(5).skip(5);
{ "_id" : ObjectId("61e191b000804d363d20458b"), "borough" : "Bronx", "cuisine" : "American", "name" : "Manhem Club", "restaurant_id" : "40364363" }
{ "_id" : ObjectId("61e191b000804d363d2045a1"), "borough" : "Bronx", "cuisine" : "American", "name" : "The New Starling Athletic Club Of The Bronx", "restaurant_id" : "40364956" }
{ "_id" : ObjectId("61e191b000804d363d2045b9"), "borough" : "Bronx", "cuisine" : "American", "name" : "Yankee Tavern", "restaurant_id" : "40365499" }
{ "_id" : ObjectId("61e191b000804d363d2045d0"), "borough" : "Bronx", "cuisine" : "Irish", "name" : "Mcdwyers Pub", "restaurant_id" : "40365893" }
{ "_id" : ObjectId("61e191b000804d363d2045e9"), "borough" : "Bronx", "cuisine" : "American", "name" : "The Punch Bowl", "restaurant_id" : "40366497" }
#3) Find the restaurants who achieved a score more than 90.
db.restaurants.find({"grades.score":{$gt:90}}).pretty()
#4) Find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168
> db.restaurants.find({cuisine:{$ne:"American"},"grades.score":{$gt:70}, "address.coord.0":{$lt:-65.754168}})
{ "_id" : ObjectId("61e191b000804d363d204752"), "address" : { "building" : "345", "coord" : [ -73.9864626, 40.7266739 ], "street" : "East 6 Street", "zipcode" : "10003" }, "borough" : "Manhattan", "cuisine" : "Indian", "grades" : [ { "date" : ISODate("2014-09-15T00:00:00Z"), "grade" : "A", "score" : 5 }, { "date" : ISODate("2014-01-14T00:00:00Z"), "grade" : "A", "score" : 8 }, { "date" : ISODate("2013-05-30T00:00:00Z"), "grade" : "A", "score" : 12 }, { "date" : ISODate("2013-04-24T00:00:00Z"), "grade" : "P", "score" : 2 }, { "date" : ISODate("2012-10-01T00:00:00Z"), "grade" : "A", "score" : 9 }, { "date" : ISODate("2012-04-06T00:00:00Z"), "grade" : "C", "score" : 92 }, { "date" : ISODate("2011-11-03T00:00:00Z"), "grade" : "C", "score" : 41 } ], "name" : "Gandhi", "restaurant_id" : "40381295" }
...
#5) Find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
> db.restaurants.find({borough:"Bronx", cuisine:{$in:["American", "Chinese"]}})
> db.restaurants.find({borough:"Bronx", cuisine:{$in:["American", "Chinese"]}},{borough:1, cuisine:1})
{ "_id" : ObjectId("61e191b000804d363d204557"), "borough" : "Bronx", "cuisine" : "American" }
{ "_id" : ObjectId("61e191b000804d363d204575"), "borough" : "Bronx", "cuisine" : "Chinese" }
...
#6) Find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
> db.restaurants.find({borough:{$nin:["Staten Island", "Bronx", "Brooklyn", "Queens"]}},{restaurant_id:1, name:1, borough:1, cuisine:1})
{ "_id" : ObjectId("61e191b000804d363d20455a"), "borough" : "Manhattan", "cuisine" : "American", "name" : "1 East 66Th Street Kitchen", "restaurant_id" : "40359480" }
{ "_id" : ObjectId("61e191b000804d363d20455f"), "borough" : "Manhattan", "cuisine" : "American", "name" : "Glorious Food", "restaurant_id" : "40361521" }
{ "_id" : ObjectId("61e191b000804d363d204562"), "borough" : "Manhattan", "cuisine" : "Delicatessen", "name" : "Bully'S Deli", "restaurant_id" : "40361708" }
{ "_id" : ObjectId("61e191b000804d363d204564"), "borough" : "Manhattan", "cuisine" : "Chicken", "name" : "Harriet'S Kitchen", "restaurant_id" : "40362098" }
{ "_id" : ObjectId("61e191b000804d363d204565"), "borough" : "Manhattan", "cuisine" : "American", "name" : "P & S Deli Grocery", "restaurant_id" : "40362264" }
{ "_id" : ObjectId("61e191b000804d363d20456a"), "borough" : "Manhattan", "cuisine" : "Irish", "name" : "Dj Reynolds Pub And Restaurant", "restaurant_id" : "30191841" }
{ "_id" : ObjectId("61e191b000804d363d20456b"), "borough" : "Manhattan", "cuisine" : "American", "name" : "Angelika Film Center", "restaurant_id" : "40362274" }
{ "_id" : ObjectId("61e191b000804d363d20456e"), "borough" : "Manhattan", "cuisine" : "Turkish", "name" : "The Country Cafe", "restaurant_id" : "40362715" }
{ "_id" : ObjectId("61e191b000804d363d204570"), "borough" : "Manhattan", "cuisine" : "American", "name" : "Downtown Deli", "restaurant_id" : "40363021" }
{ "_id" : ObjectId("61e191b000804d363d204577"), "borough" : "Manhattan", "cuisine" : "Pizza", "name" : "Domino'S Pizza", "restaurant_id" : "40363644" }
...
#7) Find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
> db.restaurants.find({"grades.score":{$not:{$gt:10}}},{restaurant_id:1, name:1, borough:1, cuisine:1, grades:1, _id:0})
{ "borough" : "Brooklyn", "cuisine" : "American", "grades" : [ { "date" : ISODate("2014-04-16T00:00:00Z"), "grade" : "A", "score" : 5 }, { "date" : ISODate("2013-04-23T00:00:00Z"), "grade" : "A", "score" : 2 }, { "date" : ISODate("2012-04-24T00:00:00Z"), "grade" : "A", "score" : 5 }, { "date" : ISODate("2011-12-16T00:00:00Z"), "grade" : "A", "score" : 2 } ], "name" : "C & C Catering Service", "restaurant_id" : "40357437" }
...
#8) Find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates
> db.restaurants.find({grades:{$elemMatch:{grade:"A", score:11, date:ISODate("2014-08-11T00:00:00Z")}}},{restaurant_id:1, name:1, grades:1})
{ "_id" : ObjectId("61e191b000804d363d2046a9"), "grades" : [ { "date" : ISODate("2014-08-11T00:00:00Z"), "grade" : "A", "score" : 11 }, { "date" : ISODate("2013-12-10T00:00:00Z"), "grade" : "A", "score" : 9 }, { "date" : ISODate("2013-06-10T00:00:00Z"), "grade" : "A", "score" : 12 }, { "date" : ISODate("2012-06-08T00:00:00Z"), "grade" : "A", "score" : 13 }, { "date" : ISODate("2012-01-25T00:00:00Z"), "grade" : "A", "score" : 8 }, { "date" : ISODate("2011-09-13T00:00:00Z"), "grade" : "A", "score" : 12 } ], "name" : "Don Filippo Restaurant", "restaurant_id" : "40372417" }
#9) Give a list of all restaurants, ordered by cuisine alphabetically and borough in reverse alphabetical order
> db.restaurants.find().sort({cuisine:1, borough:-1}
#10) Write a query to know whether all the addresses contain a street or not.
> db.restaurants.find({"address.street":{$exists:0}})

